[{"body":"","link":"https://assassin7225.github.io/","section":"","tags":null,"title":""},{"body":"Hello，我是assassin7225\n是個喜歡J-Pop的工程師(?)\n最近的心願是想去的演唱會都有票\n","link":"https://assassin7225.github.io/about/","section":"","tags":null,"title":"About"},{"body":"","link":"https://assassin7225.github.io/archives/","section":"","tags":null,"title":"Test"},{"body":"","link":"https://assassin7225.github.io/categories/","section":"categories","tags":null,"title":"Categories"},{"body":"","link":"https://assassin7225.github.io/tags/git/","section":"tags","tags":null,"title":"Git"},{"body":"算是自己用git遇到的情境跟設定紀錄\nremote 加遠端repository\ngit remote add ssh ssh://github.com/Username/repository.git\n列出遠端repository列表\ngit remote -v\n更換遠端repository位子\ngit remote set-url origin https://github.com/Username/repository.git\n刪除遠端repository ssh\ngit remote rm ssh\nssh-key 懶得打密碼可以設定ssh-key讓server認得這台機器\n在本機打mail來gen ssh key\nssh-keygen -t rsa -C \u0026quot;username@.com\u0026quot;\n然後把ssh key倒出來\ncat /home/username/.ssh/id_rsa.pub\n貼到server上的 ~/.ssh/authorized_keys\n把pub key貼進去存好，這樣推拉就不用打帳密了\ncommit 單純存到local repository git commit -m \u0026quot;commit message\u0026quot;\n多行comment 若有多行要加上去，就只打一個\u0026quot;，然後開始打原本要的格式，\n最後一行再加上\u0026quot;作為結尾\n1git commit -m \u0026#34;This is line one (enter) 2\u0026gt; and this is line two 3\u0026gt; if you finish, just add quote\u0026#34; 剛commit完還要再多加檔案上去 git commit --amend\n單純加檔案，不想改commit message (僅適用在最新的那個commit) git commit --amend --no-edit\n單純修改commit message，但其他檔案沒變 git commit --amend -m \u0026quot;New comment here\u0026quot;\ncommit檔案的一部分上去(慢慢編輯) git add -p \u0026lt;file\u0026gt;\n1\u0026gt; **Staging Patches** 2\u0026gt; 3 4\u0026gt; `Stage this hunk [y,n,a,d,/,j,J,g,e,?]? ? 5y - stage this hunk 6n - do not stage this hunk 7a - stage this and all the remaining hunks in the file 8d - do not stage this hunk nor any of the remaining hunks in the file 9g - select a hunk to go to 10/ - search for a hunk matching the given regex 11j - leave this hunk undecided, see next undecided hunk 12J - leave this hunk undecided, see next hunk 13k - leave this hunk undecided, see previous undecided hunk 14K - leave this hunk undecided, see previous hunk 15s - split the current hunk into smaller hunks 16e - manually edit the current hunk 17? - print help` 18\u0026gt; 取消commit (回not staged) git reset HEAD \u0026lt;file\u0026gt;\ngit restore --staged \u0026lt;file\u0026gt;\n取消tracking (沒有要刪除檔案但是也不讓git追蹤) git rm --cached \u0026lt;file\u0026gt;\n若沒下--cached的話會跟rm的效果一樣被刪掉\n純粹留個紀錄沒有要更新檔案 git commit --allow-empty -m \u0026quot;this is empty commit\u0026quot;\n想改部分commit message git commit --amend\n就會跳視窗出來讓你改完再存檔即可\npull 拉最新的下來，如果local端有比較新的東西請剪下來再貼在更新的東西之後\ngit pull --rebase\n拉特定遠端repository的 branchA，或著是local某個branch需要更新遠端的branch下來\nremote的repository: origin\ngit pull origin branchA\nrebase 目前在branchA，已經有一個commit，希望把branchB的新東西加過來\n在branch A下\ngit rebase branchB\n這樣branchB的新東西就會在branchA，而且branchA的commit會接在新東西之後\n改變commit之間的順序 先找到要從哪個commit之後要移動順序\ngit rebase -i bb0c9c2\n在rebase狀態看到的紀錄跟平常看的紀錄是反過來﹑越新的commit在越下面\n改完之後存檔就ok了 (vim :m 2 表示這行往下移兩行 :m-2 表示這行往上移一行 (自己是-1))\n離開detached HEAD 通常發生在看完git reflog再rebase飛回特定commit的時候會發生\n這時只要指回某個特定branch就好\ngit checkout master\n如果是原本的改爛，rebase回前面的再開一個新的宇宙(誤)也會\n這時候幫他開一個branch給他指著即可 (可明確的點出這個branch要指向特定commit)\ngit branch tmp b6d204e\npush 推特定branch到遠端 remote的repository: origin\nlocal端branch: 1042\nremote端branch: 1.0.14.1042\nlocal和remote的名字用分號隔開\ngit push origin 1042:1.0.14.1042\nTAG 單純貼tag在最新的commit上，沒有說明 git tag testfw9142\n貼tag在特定commit上 git tag testfw9142 51d54ff\n貼tag+說明 git tag -a 9041 -m \u0026quot;comment\u0026quot;\n列出特定tag git show testfw9142\n列出現在所有tag git tag -l\n推tag到遠端 tag名稱9041\ngit push origin 9041\n刪除遠端tag (aka 推一個空白的tag到remote位置) git push origin :refs/tags/my_tag\nAlias 設定co 當別名\ngit co 等同於 git checkout\ngit config --global alias.co checkout\n查特定作者的commit 要查的名字沒有空白也可以不用雙引號括起來\ngit log --author=\u0026quot;hana\u0026quot;\nCherry Pick (需要先查好commit的hash值) 把別的branch的commit單獨撿過來放(可保留原作者commit的時間)\ngit cherry-pick 51d54ff\n如果撿過來之後code有衝突，就先把衝突都消完再(或看git status怎麼說)\ngit cherry-pick --continue\n衝突發生之後用他們的 用我們的 (rebase/cherry pick/merge適用) 明確是要以對方的code為準來解conflict\ngit checkout --theirs filename\n以自己為準\ngit checkout --ours filename\nbranch rename branch git branch -m \u0026lt;oldname-branch\u0026gt; \u0026lt;newname-branch\u0026gt;\n這邊是改動local端的branch名稱\nrename remote branch local端的已經改好了，再把他推到remote去，就會看到branch name已經改好了，然後commit還在\ngit push origin \u0026lt;newname-branch\u0026gt;:\u0026lt;oldname-branch\u0026gt;\ndelete branch git branch -d \u0026lt;branch-name\u0026gt;\n如果有還沒merge的修改，要強制刪掉的\ngit branch -D \u0026lt;branch-name\u0026gt;\ndelete remote branch git push origin :\u0026lt;branch-name\u0026gt;\n換句話說，你推了一個空白的branch到遠端的branch去取代他 aka 刪掉遠端的branch\n(你把遠端的branch刪掉了)\n看遠端的branch有哪些 git branch -r\n若local端沒有存在遠端的那個branch，新增一個並且切過去+追蹤 git checkout -t origin/firmware\n或是直接省略origin，一樣也會幫你建好追蹤上游+建好branch\ngit checkout firmware\nsquash (合併多commit) 把多個commit合併成一個commit\n先rebase到要squash的前一個\ngit rebase -i bb0c9c2\n接著出現的紀錄從上到下是最舊到最新 (跟git log反過來)\n1pick 382a2a5 add database settings 2pick cd82f29 add cat 1 3pick 2bab3e7 add dog 1 4squash 27f6ed6 add dog 2 這邊add dog2會跟前面那個add dog1合併\n主要的commit日期跟message會以pick的那個為主\n被squash的會消失\n在windows上一直有一堆stash hard reset checkout都擺脫不掉的一堆檔案變更 (但又沒看到什麼diff明顯的東西) 如果不是crlf搞的鬼，那就是上面列的問題\n主因是權限變更，導致他判斷你有更改檔案\ngit config core.filemode false\n在linux上一直有一堆stash hard reset checkout都擺脫不掉的一堆檔案變更 (但又沒看到什麼diff明顯的東西) 建議直接先留著autocrlf true\n先把那堆檔案add之後 commit\n然後繼續做自己的事情 但要記得有這個temp commit\n再把autocrlf false\n設定換行符號 git 設定檔: git config --global core.autocrlf input true: 表示 checkout 轉換成 CRLF，提交時轉換成 LF input: 表示 checkout 不轉換，提交時轉換成LF false: 表示不轉換 git config --global core.safecrlf true true: 表示不允許提交時包含不同換行符號 warn: 在有不同換行符號存在時警告 false: 則允許提交時有不同換行符號存在 新增 .gitattributes text eol=lf clone 只載特定branch develop git clone -b develop --single-branch ssh://git@172.1.2.3/opt/share.git\n[Git] 讓 git clone 只複製特定的分支資料 | EPH 的程式日記 (ephrain.net)\n初始載特定branch，不要master git clone -b development\n","link":"https://assassin7225.github.io/post/git/","section":"post","tags":["Git"],"title":"Git"},{"body":"","link":"https://assassin7225.github.io/post/","section":"post","tags":null,"title":"Post"},{"body":"","link":"https://assassin7225.github.io/tags/","section":"tags","tags":null,"title":"Tags"},{"body":"","link":"https://assassin7225.github.io/categories/%E7%AD%86%E8%A8%98/","section":"categories","tags":null,"title":"筆記"},{"body":"首次聽ZTMY專場!\n@ミュージックタウン音市場 (Koza Music Town) 前言 會衝這場是因為沒買到 Zepp 專場也沒浮現祭... 所以哈囉沖繩!\n演出地點 Koza Music Town 離那霸大概 1 個小時左右的公車車程，單趟車資大概快 200 台幣。\n沿途天氣超好，有一段還可以看到海岸線，還有一直路過美軍基地，自駕應該很讚~~\n物販 ZUTOMAYO 的物販應該是我目前看過最多樣(也最貴)的潮潮周邊了，包括：\n常見的長袖 T、短袖 T、毛巾 帽 T、牛仔外套、帽子 布偶、自己出的卡牌、桌球拍等 應援物是 Shamoji(一對塑膠飯匙)，搭配發光小燈綁在上面，用法是直接兩隻對拍，一群人一起拍的時候聽起來跟拍手差不多，也能隨節奏揮動。\n實際操作示意：影片連結。\n值得讚許的是物販有開事前預約付款，現場取貨，唯一看證件的地方在這裡。\n進場 進場驗票時沒對證件，工作人員操作手機電子票就直接放行。\n在門口就收飲料錢，付 500 元換飲料代幣，直接拿代幣去櫃檯就可以換飲品。\n換了一罐飲料之後才後悔，這裡不像Zepp家有付飲料扣環，只好整場拎著看表演。\n有個女生開場前想拍舞台，手機才舉起來工作人員來制止他了\n在搖滾區往前看不用躲手機相機超爽！！\nMC 今天的ACAね是穿女僕裝，MC的話大部分都聽不懂，只能大概通靈出這次Zutomayo這次首次來沖繩了！ 中間MC還有拿服務生搖鈴搖兩下，接著ACAね拿著一份菜單念了一大串好像是叫觀眾點歌(?) 有三個選項，依照大家歡呼程度決定點哪一個\n舞台背景就是喫茶店，只是這個女僕不出餐專出歌 安可曲其一是ACAね木吉他刷扣獨唱，刷扣很乾淨tone也很好聽，看來有認真練琴沒有全部交給樂手😆\n場內大廳隨手拍拍 小可惜的是演唱會完之後急著回那霸，下次再來悠閒的隨意走走囉 歌單 マリンブルーの庭園 お勉強しといてよ 勘冴えて悔しいわ 低血ボルト 夜中のキスミ 正しくなれない 不法侵入 Ham 眩しいDNAだけ 残機 秒針を噛む MILABO ミラーチューン 綺羅キラー\nEn1. サターン 弾き語り\nEn2. あいつら全員同窓会\nEn2. 花一匁 Source 首圖來源: Zutomayo官網、Zutomayo twitter\n","link":"https://assassin7225.github.io/post/zutomayo-ainopegasus/","section":"post","tags":["J-Pop","ZUTOMAYO"],"title":"2024.01.14 ZUTOMAYO 原始五年巡回公演「喫茶・愛のペガサス」沖繩出張所"},{"body":"","link":"https://assassin7225.github.io/tags/j-pop/","section":"tags","tags":null,"title":"J-Pop"},{"body":"","link":"https://assassin7225.github.io/categories/live-in-japan/","section":"categories","tags":null,"title":"Live in Japan"},{"body":"","link":"https://assassin7225.github.io/tags/zutomayo/","section":"tags","tags":null,"title":"ZUTOMAYO"},{"body":"","link":"https://assassin7225.github.io/series/","section":"series","tags":null,"title":"Series"}]